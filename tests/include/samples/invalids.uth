
/**
 * @file invalids.uth
 *
 * @copyright This file is a part of the project yarac and is distributed under GNU GPLv3 license
 * that should have been included with the project.
 * If not, see https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * @author jorib
 *
 * @date 2022-11-30
 */

#ifndef _INVALIDS_UTH_
#define _INVALIDS_UTH_

UT_ADD_TEST(invalids,
{
	signed char succeeded = 0;
	struct Vector* tokens = NULL;
	const char* source = SAMPLES_DIR"/invalids.yara";

	W_Vector_create((struct Vector** const)&tokens, 4, &succeeded,
	{
		succeeded = 0;
		return 1;
	},
	{
		W_Logger_log(LOG_KIND_INTERNAL, INTERNAL_LOCATION, "%s",
			"failed to create tokens vector!");
		// succeeded = 0;
		return 1;
	},
	{});

	W_Lexer_lexFile(source, &tokens, &succeeded,
	{
		succeeded = 0;
		return 1;
	},
	{
		W_Logger_log(LOG_KIND_INTERNAL, INTERNAL_LOCATION,
			"failed to lex file: %s!",
			source);
		// succeeded = 0;
		return 1;
	},
	{});

	for (unsigned long long index = 0; index < tokens->count; ++index)
	{
		struct Token* token = NULL;

		W_Vector_getAt((struct Vector* const * const)&tokens, index, (void** const)&token, &succeeded,
		{
			succeeded = 0;
			return 0;
		},
		{
			// TODO: log!
			// succeeded = 0;
			return 1;
		},
		{});

		UT_ASSERT_TRUE(invalids, token->kind == TOKEN_KIND_INVALID);
	}

	for (unsigned long long index = 0; index < tokens->count; ++index)
	{
		struct Token* token = NULL;

		W_Vector_getAt((struct Vector* const * const)&tokens, index, (void** const)&token, &succeeded,
		{
			succeeded = 0;
			return 0;
		},
		{
			// TODO: log!
			// succeeded = 0;
			return 1;
		},
		{});

		W_Token_destroy((const struct Token* const * const)&token, &succeeded,
		{
			succeeded = 0;
		},
		{
			W_Logger_log(LOG_KIND_ERROR, INTERNAL_LOCATION,
				"failed to destroy a token!",
				(const char*)source);
			// succeeded = 0;
		},
		{});
	}

	W_Vector_destroy((const struct Vector* const * const)&tokens, &succeeded,
	{
		succeeded = 0;
		return 1;
	},
	{
		W_Logger_log(LOG_KIND_INTERNAL, INTERNAL_LOCATION, "%s",
			"failed to destroy vector container!");
		// succeeded = 0;
		return 1;
	},
	{});
});

#endif
